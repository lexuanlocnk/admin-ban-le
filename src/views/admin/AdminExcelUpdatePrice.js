import {
  CButton,
  CCol,
  CContainer,
  CFormInput,
  CFormSelect,
  CAccordion,
  CAccordionItem,
  CAccordionHeader,
  CAccordionBody,
  CRow,
  CSpinner,
  CAlert,
} from '@coreui/react'
import React, { useEffect, useState } from 'react'
import './css/adminExcelUpdatePrice.css'
import { axiosClient } from '../../axiosConfig'

// Constants
const ALLOWED_FILE_TYPES = [
  'application/vnd.ms-excel',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
]

const MESSAGES = {
  FILE_TYPE_ERROR: 'Vui l√≤ng ch·ªçn file Excel c√≥ ƒë·ªãnh d·∫°ng .xls ho·∫∑c .xlsx',
  NO_FILE_ERROR: 'Vui l√≤ng ch·ªçn file Excel ƒë·ªÉ t·∫£i l√™n!',
  UPLOAD_SUCCESS: 'T·∫£i l√™n th√†nh c√¥ng!',
  CONNECTION_ERROR: 'ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi ƒë·∫øn server.',
  IMPORT_SUCCESS: 'Import th√†nh c√¥ng',
  UPLOADING: 'ƒêang t·∫£i l√™n v√† x·ª≠ l√Ω file, vui l√≤ng ƒë·ª£i...',
}

const ENDPOINTS = {
  CATEGORIES: 'admin/category',
  IMPORT_TECHNOLOGY: 'admin/import-technology-2',
}

const TEMPLATE_LINK =
  'https://docs.google.com/spreadsheets/d/12bE6Vd328aBCt4gv8nVK2gzq1E_IT_b3BVgGai_A_S4/edit?gid=714954238#gid=714954238'

function AdminExcelUpdatePrice() {
  // State management
  const [valueForm, setValueForm] = useState(null)
  const [categoryList, setCategoryList] = useState([])
  const [selectedCategory, setSelectedCategory] = useState('')
  const [currentUploads, setCurrentUploads] = useState({})
  const [isLoading, setIsLoading] = useState(false)
  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' })

  // Effects
  useEffect(() => {
    fetchCategoryList()
  }, [])

  // API calls
  const fetchCategoryList = async () => {
    try {
      const response = await axiosClient.get(ENDPOINTS.CATEGORIES)
      if (response.data?.status === true) {
        setCategoryList(response.data.data)
      }
    } catch (error) {
      console.error('Error fetching category list:', error)
    }
  }

  // Event handlers
  const handleFileChange = (e) => {
    const file = e.target.files[0]

    if (file && !ALLOWED_FILE_TYPES.includes(file.type)) {
      showNotification(MESSAGES.FILE_TYPE_ERROR, 'danger')
      return
    }

    setValueForm(file)
    // Clear previous notification when new file is selected
    setNotification({ show: false, message: '', type: 'success' })
  }

  const handleSubmit = async () => {
    if (!valueForm) {
      showNotification(MESSAGES.NO_FILE_ERROR, 'danger')
      return
    }

    setIsLoading(true)
    const formData = new FormData()
    formData.append('file', valueForm)

    try {
      const response = await axiosClient.post(ENDPOINTS.IMPORT_TECHNOLOGY, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      })

      const result = response.data
      if (result.status === true) {
        setCurrentUploads({
          date: result.data?.imported_at,
          importedCount: result.data?.imported_count,
          message: result.message,
          notFoundCount: result.data?.not_found_count,
          notFoundProducts: result.data?.not_found_product,
        })
      }
    } catch (error) {
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  // Helper functions
  const showNotification = (message, type) => {
    setNotification({ show: true, message, type })
    // Auto hide notification after 5 seconds
    setTimeout(() => {
      setNotification({ show: false, message: '', type: 'success' })
    }, 5000)
  }

  const getStatusColor = (message) => {
    return message === MESSAGES.IMPORT_SUCCESS ? 'success' : 'danger'
  }

  const getStatusText = (message) => {
    return message === MESSAGES.IMPORT_SUCCESS ? 'Th√†nh c√¥ng' : 'L·ªói'
  }

  const getBackgroundColor = (message) => {
    return message === MESSAGES.IMPORT_SUCCESS ? 'rgba(25,135,84,0.1)' : 'rgba(220,53,69,0.1)'
  }

  // Render components
  const renderHeader = () => (
    <CRow className="mb-3">
      <CCol md={12}>
        <h3>C·∫¨P NH·∫¨T TH√îNG S·ªê K·ª∏ THU·∫¨T S·∫¢N PH·∫®M</h3>
      </CCol>
    </CRow>
  )

  const renderInstructionPanel = () => (
    <CRow className="mb-4">
      <CCol md={12}>
        <div
          className="p-3"
          style={{
            backgroundColor: '#eaf4fc',
            borderLeft: '5px solid #0d6efd',
            lineHeight: '1.6',
          }}
        >
          <h5 className="fw-bold mb-2">üìò H∆∞·ªõng d·∫´n v√† quy ƒë·ªãnh upload</h5>
          <ul className="mb-2">
            <li>
              <strong>Y√™u c·∫ßu ƒë·ªãnh d·∫°ng:</strong> C√°c file import th√¥ng s·ªë k·ªπ thu·∫≠t ph·∫£i c√≥ c√°c
              tr∆∞·ªùng (column) t∆∞∆°ng ·ª©ng v·ªõi c√°c tr∆∞·ªùng th√¥ng s·ªë k·ªπ thu·∫≠t c·ªßa ng√†nh h√†ng c·∫ßn c·∫≠p
              nh·∫≠t. Trong ƒë√≥ 6 tr∆∞·ªùng ƒë·∫ßu ti√™n b·∫Øt bu·ªôc ph·∫£i gi·ªëng nh∆∞ h√¨nh m·∫´u v·ªÅ n·ªôi dung v√† th·ª©
              t·ª±.
            </li>
            <li>
              <strong>B∆∞·ªõc 1:</strong> Ch·ªçn file c·∫ßn import th√¥ng s·ªë k·ªπ thu·∫≠t.
            </li>
            <li>
              <strong>B∆∞·ªõc 2:</strong> Ch·ªçn ng√†nh h√†ng t∆∞∆°ng ·ª©ng.
            </li>
            <li>
              <strong>B∆∞·ªõc 3:</strong> Nh·∫•n n√∫t <strong>T·∫£i l√™n! b·∫Øt ƒë·∫ßu x·ª≠ l√Ω</strong> ƒë·ªÉ import
              file v√†o database.
            </li>
          </ul>
          <p className="mb-0">
            <strong>L∆∞u √Ω:</strong> N·∫øu th√†nh c√¥ng s·∫Ω hi·ªÉn th·ªã th√¥ng b√°o{' '}
            <span className="text-success fw-bold">Th√†nh c√¥ng</span>. N·∫øu c√≥ l·ªói s·∫Ω hi·ªÉn th·ªã{' '}
            <span className="text-danger fw-bold">n·ªôi dung l·ªói ho·∫∑c m√£ kh√¥ng t√¨m th·∫•y</span>.
          </p>
        </div>
      </CCol>
    </CRow>
  )

  const renderFileUploadSection = () => (
    <>
      <CRow className="mb-3">
        <CCol md={3}>
          <div className="title_admin">
            <span>File excel c√≥ ƒë·ªãnh d·∫°ng *.xls ho·∫∑c *.xlsx</span>
          </div>
        </CCol>
        <CCol md={4}>
          <div className="value_admin">
            <CFormInput
              onChange={handleFileChange}
              size="sm"
              type="file"
              id="formFile"
              accept=".xls,.xlsx"
              label={null}
              disabled={isLoading}
            />
          </div>
        </CCol>
      </CRow>

      <CRow className="mb-3">
        <CCol md={3}>
          <div className="title_admin">
            <span>File excel m·∫´u</span>
          </div>
        </CCol>
        <CCol md={9}>
          <div className="value_admin d-flex flex-column">
            <div className="mb-2">
              <a
                href={TEMPLATE_LINK}
                target="_blank"
                rel="noopener noreferrer"
                className="btn btn-outline-primary btn-sm"
                style={{ width: 'fit-content' }}
              >
                üìÑ T·∫£i file m·∫´u Excel t·ª´ Google Sheets
              </a>
            </div>
            <img className="w-100 h-100" src="/excel_import_tskt.png" alt="File excel m·∫´u" />
          </div>
        </CCol>
      </CRow>
    </>
  )

  const renderSubmitButton = () => (
    <CRow className="mb-3">
      <CCol md={12} className="d-flex justify-content-center">
        <CButton
          style={{ fontSize: 16 }}
          onClick={handleSubmit}
          size="sm"
          color="primary"
          disabled={isLoading || !valueForm}
        >
          {isLoading && <CSpinner size="sm" className="me-2" />}
          {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'T·∫£i l√™n! b·∫Øt ƒë·∫ßu x·ª≠ l√Ω'}
        </CButton>
      </CCol>
    </CRow>
  )

  const renderNotification = () =>
    notification.show && (
      <CRow className="mb-3">
        <CCol md={12}>
          <CAlert
            color={notification.type}
            dismissible
            onClose={() => setNotification({ show: false, message: '', type: 'success' })}
          >
            {notification.message}
          </CAlert>
        </CCol>
      </CRow>
    )

  const renderUploadHistory = () => (
    <CRow className="mb-3">
      <CCol md={12}>
        <h5 className="mb-3 mt-4">üìÇ Danh s√°ch l·∫ßn import</h5>
        {currentUploads && Object.keys(currentUploads).length > 0 && (
          <CAccordion alwaysOpen>
            <CAccordionItem className="border mb-2" style={{ borderRadius: 0 }}>
              <CAccordionHeader>
                <div className="d-flex justify-content-between align-items-center w-100 px-2">
                  <div style={{ flex: '0 0 40%' }} className="fw-semibold">
                    {`Ng√†y ${currentUploads.date}`}
                  </div>
                  <div style={{ flex: '0 0 40%' }}>{currentUploads.fileName}</div>
                  <div
                    className={`fw-bold text-${getStatusColor(currentUploads.message)}`}
                    style={{ fontSize: '1rem', flex: '0 0 20%' }}
                  >
                    {getStatusText(currentUploads.message)}
                  </div>
                </div>
              </CAccordionHeader>
              <CAccordionBody
                className="py-3 px-4"
                style={{
                  backgroundColor: getBackgroundColor(currentUploads.message),
                  fontSize: '1rem',
                }}
              >
                <div className="mt-2">
                  <strong>{`ƒê√£ import ${currentUploads.importedCount} s·∫£n ph·∫©m.`}</strong>
                </div>
                {currentUploads.notFoundCount > 0 && (
                  <div className="mt-2">
                    <strong>{`C√≥ ${currentUploads.notFoundCount} s·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y.`}</strong>
                    <div className="mt-2">
                      <strong>Danh s√°ch m√£ kh√¥ng t√¨m th·∫•y: </strong>
                      <span>{currentUploads.notFoundProducts}</span>
                    </div>
                  </div>
                )}
              </CAccordionBody>
            </CAccordionItem>
          </CAccordion>
        )}
      </CCol>
    </CRow>
  )

  // Main render
  return (
    <CContainer>
      {renderHeader()}
      {renderNotification()}
      {renderInstructionPanel()}
      {renderFileUploadSection()}
      {renderSubmitButton()}
      {renderUploadHistory()}
    </CContainer>
  )
}

export default AdminExcelUpdatePrice
